let community_resource ~title ~desc ~online_url ~source_url ?(img="") () =
  <div class="flex flex-col card dark:dark-card rounded-lg border border-separator_30">
    <a href="<%s online_url %>" class="grow">
      <div class="w-full h-44 text-white rounded-t-xl bg-cover bg-center" style="background-image: url(<%s Ocamlorg_static.Media.url ("resources/" ^ img) %>)">
      </div>
      <div class="flex flex-col p-5 grow">
        <h2 class="text-xl font-bold text-title dark:text-dark-title mb-3"><%s title %></h2>
        <p class="text-base text-content dark:text-dark-content font-normal mb-2 grow">
          <%s desc %>
        </p>
      </div>
    </a>

    <div class="px-5 pb-5">
      <a href="<%s online_url %>" class="block">
        <span class="text-sm text-[#D54000] font-normal"><%s online_url %></span>
      </a>
% (match source_url with | Some source_url when source_url <> online_url ->
      <a href="<%s source_url %>" class="block">
        <span class="text-sm text-[#D54000] font-normal"><%s source_url %></span>
      </a>
% | _ -> ()) ;
    </div>
  </div>

let string_from_event_type = function
  | Data.Event.Meetup -> "Meetup"
  | Conference -> "Conference"
  | Seminar -> "Seminar"
  | Hackathon -> "Hackathon"
  | Retreat -> "Retreat"

let color_for_event_type = function
  | Data.Event.Meetup -> "bg-avatar-6"
  | Conference -> "bg-avatar-0"
  | Seminar -> "bg-avatar-11"
  | Hackathon -> "bg-avatar-8"
  | Retreat -> "bg-avatar-9"

let upcoming_event (event : Data.Event.t) =
  <a href="<%s event.url %>" class="card dark:dark-card p-5 rounded-xl">
    <p class="font-bold text-title dark:text-dark-title mb-2"><%s event.title %></p>
    <div class="px-3 mb-2 inline-block <%s color_for_event_type event.event_type %> rounded-3xl font-mono text-sm text-center text-white">
      <%s string_from_event_type event.event_type %>
    </div>
    <div class="flex items-center space-x-2 mb-3">
      <%s! Icons.map_pin "h-5 w-5 text-primary dark:text-dark-primary mr-2" %>
      <p class="text-content dark:text-dark-content"><%s event.textual_location %></p>
    </div>
    <div class="flex items-center space-x-2 mt-2">
      <%s! Icons.calendar "h-5 w-5 text-primary dark:text-dark-primary mr-2" %>
      <p class="text-content dark:text-dark-content">
        <span class="event-start-time" data-start-time="<%s event.starts.yyyy_mm_dd %> 
          <%s event.starts.utc_hh_mm |> Option.map (fun s -> s ^ " UTC") |> Option.value ~default:"" %>"></span>
      </p>
    </div>
    <% (match event.ends with | None -> () | Some ends -> ( %>
    <div class="flex items-center space-x-2 mt-2">
      <p class="ml-9 text-content dark:text-dark-content">
        to
        <span class="event-end-time" data-end-time="<%s ends.yyyy_mm_dd %> 
          <%s ends.utc_hh_mm |> Option.map (fun s -> s ^ " UTC") |> Option.value ~default:"" %>"></span>
      </p>
    </div>
    <% )); %>
  </a>

let recurring_event (recurring_event : Data.Event.RecurringEvent.t) =
  <a href="<%s recurring_event.url %>" class="card dark:dark-card p-5 rounded-xl">
    <p class="font-bold text-lg text-title dark:text-dark-title mb-3">
      <%s recurring_event.title %>
    </p>
    <div class="px-3 mb-2 inline-block <%s color_for_event_type recurring_event.event_type %> rounded-3xl font-mono text-sm text-center text-white">
      <%s string_from_event_type recurring_event.event_type %>
    </div>
    <div class="flex items-center space-x-2">
      <%s! Icons.map_pin "h-5 w-5 text-primary dark:text-dark-primary" %>
      <p class="text-content dark:text-dark-content">
        <%s recurring_event.textual_location %>
      </p>
    </div>
  </a>
  
